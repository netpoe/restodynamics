{"ast":null,"code":"import _slicedToArray from \"/Users/GustavoIbarra/Projects/ELCOMALOTE/restodynamics/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/GustavoIbarra/Projects/ELCOMALOTE/restodynamics/web/src/views/stock/StockUnitDetails.tsx\";\nimport { Box, Container, TextField, Typography, withStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useMutation } from \"urql\";\nexport const StockUnitDetails = withStyles(theme => ({}))(({\n  classes\n}) => {\n  return React.createElement(React.Fragment, null, React.createElement(Box, {\n    minHeight: \"100vh\",\n    bgcolor: \"default\",\n    pt: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(Container, {\n    maxWidth: \"xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Nueva Unidad de Inventario\"), React.createElement(StockUnitNameField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }))));\n});\n\nconst StockUnitNameField = () => {\n  const _React$useState = React.useState(\"\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        name = _React$useState2[0],\n        setName = _React$useState2[1];\n\n  const _React$useState3 = React.useState(undefined),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        error = _React$useState4[0],\n        setError = _React$useState4[1];\n\n  const _useMutation = useMutation(\"\\n    mutation ($where: StockUnitWhereUniqueInput!, $create: StockUnitCreateInput!, $update: StockUnitUpdateInput!) {\\n      upsertStockUnit(where: $where, create: $create, update: $update) {\\n        id\\n        name\\n      }\\n    }\\n  \"),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        mutation = _useMutation2[0],\n        executeMutation = _useMutation2[1];\n\n  const upsert = async () => {\n    if (!name) {\n      return;\n    }\n\n    const _ref = await executeMutation({\n      where: {\n        name\n      },\n      create: {\n        name\n      },\n      update: {\n        name\n      }\n    }),\n          data = _ref.data,\n          mutationError = _ref.error;\n\n    console.log(data, mutationError);\n    setError(mutationError);\n  };\n\n  return React.createElement(TextField, {\n    error: Boolean(error),\n    fullWidth: true,\n    name: \"name\",\n    variant: \"outlined\",\n    label: \"Nombre\",\n    autoFocus: true,\n    value: name,\n    onChange: e => setName(e.target.value),\n    onBlur: upsert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/GustavoIbarra/Projects/ELCOMALOTE/restodynamics/web/src/views/stock/StockUnitDetails.tsx"],"names":["Box","Container","TextField","Typography","withStyles","React","useMutation","StockUnitDetails","theme","classes","StockUnitNameField","useState","name","setName","undefined","error","setError","mutation","executeMutation","upsert","where","create","update","data","mutationError","console","log","Boolean","e","target","value"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,SAAzB,EAAoCC,UAApC,EAAgDC,UAAhD,QAAkE,mBAAlE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAwBC,WAAxB,QAA2C,MAA3C;AAEA,OAAO,MAAMC,gBAAgB,GAAGH,UAAU,CAACI,KAAK,KAAK,EAAL,CAAN,CAAV,CAA0B,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmC;AAC3F,SACE,0CACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,IAAA,OAAO,EAAC,SAA/B;AAAyC,IAAA,EAAE,EAAE,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADF,EAEE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CADF;AAUD,CAX+B,CAAzB;;AAaP,MAAMC,kBAAkB,GAAG,MAAM;AAAA,0BACPL,KAAK,CAACM,QAAN,CAAe,EAAf,CADO;AAAA;AAAA,QACxBC,IADwB;AAAA,QAClBC,OADkB;;AAAA,2BAELR,KAAK,CAACM,QAAN,CAA0CG,SAA1C,CAFK;AAAA;AAAA,QAExBC,KAFwB;AAAA,QAEjBC,QAFiB;;AAAA,uBAGKV,WAAW,iPAHhB;AAAA;AAAA,QAGxBW,QAHwB;AAAA,QAGdC,eAHc;;AAY/B,QAAMC,MAAM,GAAG,YAAY;AACzB,QAAI,CAACP,IAAL,EAAW;AACT;AACD;;AAHwB,iBAKc,MAAMM,eAAe,CAAC;AAC3DE,MAAAA,KAAK,EAAE;AACLR,QAAAA;AADK,OADoD;AAI3DS,MAAAA,MAAM,EAAE;AACNT,QAAAA;AADM,OAJmD;AAO3DU,MAAAA,MAAM,EAAE;AACNV,QAAAA;AADM;AAPmD,KAAD,CALnC;AAAA,UAKjBW,IALiB,QAKjBA,IALiB;AAAA,UAKJC,aALI,QAKXT,KALW;;AAgBzBU,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBC,aAAlB;AACAR,IAAAA,QAAQ,CAACQ,aAAD,CAAR;AACD,GAlBD;;AAoBA,SACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEG,OAAO,CAACZ,KAAD,CADhB;AAEE,IAAA,SAAS,MAFX;AAGE,IAAA,IAAI,EAAC,MAHP;AAIE,IAAA,OAAO,EAAC,UAJV;AAKE,IAAA,KAAK,EAAC,QALR;AAME,IAAA,SAAS,MANX;AAOE,IAAA,KAAK,EAAEH,IAPT;AAQE,IAAA,QAAQ,EAAGgB,CAAD,IAAYf,OAAO,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV,CAR/B;AASE,IAAA,MAAM,EAAEX,MATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAaD,CA7CD","sourcesContent":["import { Box, Container, TextField, Typography, withStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { CombinedError, useMutation } from \"urql\";\n\nexport const StockUnitDetails = withStyles(theme => ({}))(({ classes }: { classes: any }) => {\n  return (\n    <>\n      <Box minHeight=\"100vh\" bgcolor=\"default\" pt={4}>\n        <Container maxWidth=\"xl\">\n          <Typography variant=\"h6\">Nueva Unidad de Inventario</Typography>\n          <StockUnitNameField />\n        </Container>\n      </Box>\n    </>\n  );\n});\n\nconst StockUnitNameField = () => {\n  const [name, setName] = React.useState(\"\");\n  const [error, setError] = React.useState<CombinedError | undefined>(undefined);\n  const [mutation, executeMutation] = useMutation(`\n    mutation ($where: StockUnitWhereUniqueInput!, $create: StockUnitCreateInput!, $update: StockUnitUpdateInput!) {\n      upsertStockUnit(where: $where, create: $create, update: $update) {\n        id\n        name\n      }\n    }\n  `);\n\n  const upsert = async () => {\n    if (!name) {\n      return;\n    }\n    \n    const { data, error: mutationError } = await executeMutation({\n      where: {\n        name,\n      },\n      create: {\n        name,\n      },\n      update: {\n        name,\n      },\n    });\n    console.log(data, mutationError);\n    setError(mutationError);\n  };\n\n  return (\n    <TextField\n      error={Boolean(error)}\n      fullWidth\n      name=\"name\"\n      variant=\"outlined\"\n      label=\"Nombre\"\n      autoFocus\n      value={name}\n      onChange={(e: any) => setName(e.target.value)}\n      onBlur={upsert}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}