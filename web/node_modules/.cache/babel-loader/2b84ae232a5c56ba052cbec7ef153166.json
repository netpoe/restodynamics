{"ast":null,"code":"import _slicedToArray from \"/Users/GustavoIbarra/Projects/ELCOMALOTE/restodynamics/web/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/GustavoIbarra/Projects/ELCOMALOTE/restodynamics/web/src/views/stock/StockUnitDetails.tsx\";\nimport { Box, Container, TextField, Typography, withStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useMutation, useQuery } from \"urql\";\nimport { QueryStockUnit } from \"../../api/queries\";\nexport const StockUnitDetails = withStyles(theme => ({}))(({\n  classes,\n  match\n}) => {\n  const _useQuery = useQuery({\n    query: QueryStockUnit,\n    variables: {\n      where: {\n        id: match.params.id\n      }\n    }\n  }),\n        _useQuery2 = _slicedToArray(_useQuery, 1),\n        stockUnitDetailsQuery = _useQuery2[0];\n\n  console.log(stockUnitDetailsQuery.error);\n  console.log(stockUnitDetailsQuery.data);\n  return React.createElement(React.Fragment, null, stockUnitDetailsQuery.fetching ? React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Cargando\") : stockUnitDetailsQuery.error || stockUnitDetailsQuery.data == null ? React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Error\") : React.createElement(Box, {\n    minHeight: \"100vh\",\n    bgcolor: \"default\",\n    pt: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(Container, {\n    maxWidth: \"xl\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, match.params.id ? \"Unidad de inventario: \".concat(stockUnitDetailsQuery.data.stockUnit.name) : \"Nueva Unidad de Inventario\"), React.createElement(StockUnitNameField, {\n    id: stockUnitDetailsQuery.data.stockUnit.id,\n    value: stockUnitDetailsQuery.data.stockUnit.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }))));\n});\n\nconst StockUnitNameField = ({\n  id,\n  value\n}) => {\n  const _React$useState = React.useState(value),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        name = _React$useState2[0],\n        setName = _React$useState2[1];\n\n  const _React$useState3 = React.useState(undefined),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        error = _React$useState4[0],\n        setError = _React$useState4[1];\n\n  const _useMutation = useMutation(\"\\n    mutation ($where: StockUnitWhereUniqueInput!, $create: StockUnitCreateInput!, $update: StockUnitUpdateInput!) {\\n      upsertStockUnit(where: $where, create: $create, update: $update) {\\n        id\\n        name\\n      }\\n    }\\n  \"),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        mutation = _useMutation2[0],\n        executeMutation = _useMutation2[1];\n\n  const upsert = async () => {\n    if (!name) {\n      return;\n    }\n\n    const _ref = await executeMutation({\n      where: {\n        id\n      },\n      create: {\n        name\n      },\n      update: {\n        name\n      }\n    }),\n          data = _ref.data,\n          mutationError = _ref.error;\n\n    console.log(data, mutationError);\n    setError(mutationError);\n  };\n\n  return React.createElement(TextField, {\n    error: Boolean(error),\n    fullWidth: true,\n    id: id,\n    name: \"name\",\n    variant: \"outlined\",\n    label: \"Nombre\",\n    autoFocus: !Boolean(name),\n    value: name,\n    onChange: e => setName(e.target.value),\n    onBlur: upsert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  });\n};","map":{"version":3,"sources":["/Users/GustavoIbarra/Projects/ELCOMALOTE/restodynamics/web/src/views/stock/StockUnitDetails.tsx"],"names":["Box","Container","TextField","Typography","withStyles","React","useMutation","useQuery","QueryStockUnit","StockUnitDetails","theme","classes","match","query","variables","where","id","params","stockUnitDetailsQuery","console","log","error","data","fetching","stockUnit","name","StockUnitNameField","value","useState","setName","undefined","setError","mutation","executeMutation","upsert","create","update","mutationError","Boolean","e","target"],"mappings":"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","sourcesContent":["import { Box, Container, TextField, Typography, withStyles } from \"@material-ui/core\";\nimport React from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { CombinedError, useMutation, useQuery } from \"urql\";\nimport { QueryStockUnit } from \"../../api/queries\";\n\ninterface IStockUnitDetailsProps extends RouteComponentProps<{ id: string }> {\n  classes: any;\n}\n\nexport const StockUnitDetails = withStyles(theme => ({}))(\n  ({ classes, match }: IStockUnitDetailsProps) => {\n    const [stockUnitDetailsQuery] = useQuery({\n      query: QueryStockUnit,\n      variables: { where: { id: match.params.id } },\n    });\n\n    console.log(stockUnitDetailsQuery.error);\n    console.log(stockUnitDetailsQuery.data);\n\n    return (\n      <>\n        {stockUnitDetailsQuery.fetching ? (\n          <Typography>Cargando</Typography>\n        ) : stockUnitDetailsQuery.error || stockUnitDetailsQuery.data == null ? (\n          <Typography>Error</Typography>\n        ) : (\n          <Box minHeight=\"100vh\" bgcolor=\"default\" pt={4}>\n            <Container maxWidth=\"xl\">\n              <Typography variant=\"h6\">\n                {match.params.id\n                  ? `Unidad de inventario: ${stockUnitDetailsQuery.data.stockUnit.name}`\n                  : \"Nueva Unidad de Inventario\"}\n              </Typography>\n              <StockUnitNameField\n                id={stockUnitDetailsQuery.data.stockUnit.id}\n                value={stockUnitDetailsQuery.data.stockUnit.name}\n              />\n            </Container>\n          </Box>\n        )}\n      </>\n    );\n  },\n);\n\nconst StockUnitNameField = ({ id, value }: { id: string; value: any }) => {\n  const [name, setName] = React.useState(value);\n  const [error, setError] = React.useState<CombinedError | undefined>(undefined);\n  const [mutation, executeMutation] = useMutation(`\n    mutation ($where: StockUnitWhereUniqueInput!, $create: StockUnitCreateInput!, $update: StockUnitUpdateInput!) {\n      upsertStockUnit(where: $where, create: $create, update: $update) {\n        id\n        name\n      }\n    }\n  `);\n\n  const upsert = async () => {\n    if (!name) {\n      return;\n    }\n\n    const { data, error: mutationError } = await executeMutation({\n      where: {\n        id,\n      },\n      create: {\n        name,\n      },\n      update: {\n        name,\n      },\n    });\n    console.log(data, mutationError);\n    setError(mutationError);\n  };\n\n  return (\n    <TextField\n      error={Boolean(error)}\n      fullWidth\n      id={id}\n      name=\"name\"\n      variant=\"outlined\"\n      label=\"Nombre\"\n      autoFocus={!Boolean(name)}\n      value={name}\n      onChange={(e: any) => setName(e.target.value)}\n      onBlur={upsert}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}